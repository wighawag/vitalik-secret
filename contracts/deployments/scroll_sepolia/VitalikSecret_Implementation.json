{
  "address": "0xad994dedaab665ce5aad2a333253e30708087149",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provided",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferRejected",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RANDOM",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SOLUTION",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC721WithBlocknumber.OwnerData[]",
          "name": "ownersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum VitalikSecret.Move[]",
          "name": "moves",
          "type": "uint8[]"
        }
      ],
      "name": "proposeSolution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "VitalikSecret",
  "sourceName": "src/VitalikSecret.sol",
  "bytecode": "0x60a0604052600f60805234801561001557600080fd5b50608051611aa36100316000396000610d500152611aa36000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806395d89b41116100cd578063c87b56dd11610081578063e985e9c511610066578063e985e9c51461039a578063f3945282146103e3578063f964d1091461040357600080fd5b8063c87b56dd1461033d578063d9158ec81461035e57600080fd5b8063b88d4fde116100b2578063b88d4fde1461030f578063bdffd28214610322578063c370c3c71461032a57600080fd5b806395d89b41146102c3578063a22cb465146102fc57600080fd5b806323b872dd1161012457806348f3c51c1161010957806348f3c51c146102335780636352211e1461028f57806370a08231146102a257600080fd5b806323b872dd1461020d57806342842e0e1461022057600080fd5b806301ffc9a71461015657806306fdde031461017e578063081812fc146101c0578063095ea7b3146101f8575b600080fd5b6101696101643660046114c0565b61043f565b60405190151581526020015b60405180910390f35b60408051808201909152600e81527f564954414c494b2053454352455400000000000000000000000000000000000060208201525b6040516101759190611548565b6101d36101ce36600461155b565b610524565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610175565b61020b610206366004611598565b6105e8565b005b61020b61021b3660046115c2565b6106f9565b61020b61022e3660046115c2565b610977565b61026361024136600461155b565b6000908152602081905260409020549067ffffffffffffffff60b883901c1690565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610175565b6101d361029d36600461155b565b610997565b6102b56102b03660046115fe565b6109fb565b604051908152602001610175565b60408051808201909152600381527f565453000000000000000000000000000000000000000000000000000000000060208201526101b3565b61020b61030a366004611619565b610a8b565b61020b61031d366004611684565b610a9a565b6102b5600481565b61020b6103383660046117ca565b610d1a565b6101b361034b36600461155b565b5060408051602081019091526000815290565b6101b36040518060400160405280601281526020017f307831323334353637383941424344454630000000000000000000000000000081525081565b6101696103a836600461180c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205460ff1690565b6103f66103f13660046117ca565b610e32565b604051610175919061183f565b6101b36040518060400160405280601281526020017f307832313334353637383941424344464530000000000000000000000000000081525081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104d257507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061051e57507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000818152602081905260408120547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff82166105ad576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b80156105de5750505060009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b5060009392505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c1673ffffffffffffffffffffffffffffffffffffffff8216610659576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018490526024016105a4565b3373ffffffffffffffffffffffffffffffffffffffff8316148015906106b0575073ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832033845290915290205460ff16155b156106e7576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f382828686610f69565b50505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c167f80000000000000000000000000000000000000000000000000000000000000008083161473ffffffffffffffffffffffffffffffffffffffff831661078f576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018590526024016105a4565b8273ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610814576040517f23295f0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8088166004830152841660248201526044016105a4565b73ffffffffffffffffffffffffffffffffffffffff8516158061084c575073ffffffffffffffffffffffffffffffffffffffff851630145b1561089b576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024016105a4565b3373ffffffffffffffffffffffffffffffffffffffff87161461095d578080156108e8575060008481526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b158015610926575073ffffffffffffffffffffffffffffffffffffffff8616600090815260026020908152604080832033845290915290205460ff16155b1561095d576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61096f868686601886901c15156110f2565b505050505050565b61099283838360405180602001604052806000815250610a9a565b505050565b60008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff81166109f6576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018390526024016105a4565b919050565b600073ffffffffffffffffffffffffffffffffffffffff8216610a62576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016105a4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b610a963383836111d5565b5050565b6000828152602081905260409020546affffffffffffffffffffff60a082901c167f80000000000000000000000000000000000000000000000000000000000000008083161473ffffffffffffffffffffffffffffffffffffffff8316610b30576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018690526024016105a4565b8673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bb5576040517f23295f0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8089166004830152841660248201526044016105a4565b73ffffffffffffffffffffffffffffffffffffffff86161580610bed575073ffffffffffffffffffffffffffffffffffffffff861630145b15610c3c576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871660048201526024016105a4565b3373ffffffffffffffffffffffffffffffffffffffff881614610cfe57808015610c89575060008581526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b158015610cc7575073ffffffffffffffffffffffffffffffffffffffff8716600090815260026020908152604080832033845290915290205460ff16155b15610cfe576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d11878787601886901c15158861126d565b50505050505050565b60408051808201909152601281527f307832313334353637383941424344464530000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060005b83811015610e2b576000610dad8484888886818110610d9357610d936118a4565b9050602002016020810190610da891906118d3565b6112d9565b9350905080610e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4d4f5645000000000000000000000000000000000000000060448201526064016105a4565b5080610e2381611923565b915050610d72565b5050505050565b60608167ffffffffffffffff811115610e4d57610e4d611655565b604051908082528060200260200182016040528015610e9257816020015b6040805180820190915260008082526020820152815260200190600190039081610e6b5790505b50905060005b82811015610f62576000806000868685818110610eb757610eb76118a4565b90506020020135815260200190815260200160002054905080838381518110610ee257610ee26118a4565b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060b881901c67ffffffffffffffff16838381518110610f4157610f416118a4565b60209081029190910181015101525080610f5a81611923565b915050610e98565b5092915050565b601883901c6000610f7b85600161195b565b905081601882901c14610fba576040517fadc1557200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841661100757600083815260208190526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff881617905561108f565b60008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8a811660a087901b177f800000000000000000000000000000000000000000000000000000000000000017909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790555b828473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602081905260409091208054909101905580156111735773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b6000828152602081905260408082204360b81b73ffffffffffffffffffffffffffffffffffffffff80881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611279858585856110f2565b73ffffffffffffffffffffffffffffffffffffffff84163b15610e2b576112a333868686856113ba565b610e2b576040517f4e472e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080806112e860048661199d565b905060006112f76004876119b1565b9050600085600381111561130d5761130d6119c5565b0361132f5761131e600160046119f4565b82101561132a57600193505b6113b0565b6001856003811115611343576113436119c5565b0361136457611354600160046119f4565b81101561132a57600193506113b0565b6002856003811115611378576113786119c5565b0361138c57811561132a57600193506113b0565b60038560038111156113a0576113a06119c5565b036113b05780156113b057600193505b5050935093915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663150b7a02888887876040518563ffffffff1660e01b81526004016113fc9493929190611a07565b6020604051808303816000875af115801561141b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143f9190611a50565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146114bd57600080fd5b50565b6000602082840312156114d257600080fd5b81356114dd8161148f565b9392505050565b6000815180845260005b8181101561150a576020818501810151868301820152016114ee565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006114dd60208301846114e4565b60006020828403121561156d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109f657600080fd5b600080604083850312156115ab57600080fd5b6115b483611574565b946020939093013593505050565b6000806000606084860312156115d757600080fd5b6115e084611574565b92506115ee60208501611574565b9150604084013590509250925092565b60006020828403121561161057600080fd5b6114dd82611574565b6000806040838503121561162c57600080fd5b61163583611574565b91506020830135801515811461164a57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561169a57600080fd5b6116a385611574565b93506116b160208601611574565b925060408501359150606085013567ffffffffffffffff808211156116d557600080fd5b818701915087601f8301126116e957600080fd5b8135818111156116fb576116fb611655565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561174157611741611655565b816040528281528a602084870101111561175a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008083601f84011261179057600080fd5b50813567ffffffffffffffff8111156117a857600080fd5b6020830191508360208260051b85010111156117c357600080fd5b9250929050565b600080602083850312156117dd57600080fd5b823567ffffffffffffffff8111156117f457600080fd5b6118008582860161177e565b90969095509350505050565b6000806040838503121561181f57600080fd5b61182883611574565b915061183660208401611574565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611897578151805173ffffffffffffffffffffffffffffffffffffffff16855286015186850152928401929085019060010161185c565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156118e557600080fd5b8135600481106114dd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611954576119546118f4565b5060010190565b8082018082111561051e5761051e6118f4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826119ac576119ac61196e565b500690565b6000826119c0576119c061196e565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8181038181111561051e5761051e6118f4565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152611a4660808301846114e4565b9695505050505050565b600060208284031215611a6257600080fd5b81516114dd8161148f56fea264697066735822122012e0017d728e57d31d65c17e07771330b08b70e61e3e9fd634906b30ae10a87d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c806395d89b41116100cd578063c87b56dd11610081578063e985e9c511610066578063e985e9c51461039a578063f3945282146103e3578063f964d1091461040357600080fd5b8063c87b56dd1461033d578063d9158ec81461035e57600080fd5b8063b88d4fde116100b2578063b88d4fde1461030f578063bdffd28214610322578063c370c3c71461032a57600080fd5b806395d89b41146102c3578063a22cb465146102fc57600080fd5b806323b872dd1161012457806348f3c51c1161010957806348f3c51c146102335780636352211e1461028f57806370a08231146102a257600080fd5b806323b872dd1461020d57806342842e0e1461022057600080fd5b806301ffc9a71461015657806306fdde031461017e578063081812fc146101c0578063095ea7b3146101f8575b600080fd5b6101696101643660046114c0565b61043f565b60405190151581526020015b60405180910390f35b60408051808201909152600e81527f564954414c494b2053454352455400000000000000000000000000000000000060208201525b6040516101759190611548565b6101d36101ce36600461155b565b610524565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610175565b61020b610206366004611598565b6105e8565b005b61020b61021b3660046115c2565b6106f9565b61020b61022e3660046115c2565b610977565b61026361024136600461155b565b6000908152602081905260409020549067ffffffffffffffff60b883901c1690565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610175565b6101d361029d36600461155b565b610997565b6102b56102b03660046115fe565b6109fb565b604051908152602001610175565b60408051808201909152600381527f565453000000000000000000000000000000000000000000000000000000000060208201526101b3565b61020b61030a366004611619565b610a8b565b61020b61031d366004611684565b610a9a565b6102b5600481565b61020b6103383660046117ca565b610d1a565b6101b361034b36600461155b565b5060408051602081019091526000815290565b6101b36040518060400160405280601281526020017f307831323334353637383941424344454630000000000000000000000000000081525081565b6101696103a836600461180c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205460ff1690565b6103f66103f13660046117ca565b610e32565b604051610175919061183f565b6101b36040518060400160405280601281526020017f307832313334353637383941424344464530000000000000000000000000000081525081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104d257507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061051e57507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000818152602081905260408120547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff82166105ad576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b80156105de5750505060009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b5060009392505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c1673ffffffffffffffffffffffffffffffffffffffff8216610659576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018490526024016105a4565b3373ffffffffffffffffffffffffffffffffffffffff8316148015906106b0575073ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832033845290915290205460ff16155b156106e7576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f382828686610f69565b50505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c167f80000000000000000000000000000000000000000000000000000000000000008083161473ffffffffffffffffffffffffffffffffffffffff831661078f576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018590526024016105a4565b8273ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610814576040517f23295f0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8088166004830152841660248201526044016105a4565b73ffffffffffffffffffffffffffffffffffffffff8516158061084c575073ffffffffffffffffffffffffffffffffffffffff851630145b1561089b576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024016105a4565b3373ffffffffffffffffffffffffffffffffffffffff87161461095d578080156108e8575060008481526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b158015610926575073ffffffffffffffffffffffffffffffffffffffff8616600090815260026020908152604080832033845290915290205460ff16155b1561095d576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61096f868686601886901c15156110f2565b505050505050565b61099283838360405180602001604052806000815250610a9a565b505050565b60008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff81166109f6576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018390526024016105a4565b919050565b600073ffffffffffffffffffffffffffffffffffffffff8216610a62576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016105a4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b610a963383836111d5565b5050565b6000828152602081905260409020546affffffffffffffffffffff60a082901c167f80000000000000000000000000000000000000000000000000000000000000008083161473ffffffffffffffffffffffffffffffffffffffff8316610b30576040517f38077a2b000000000000000000000000000000000000000000000000000000008152600481018690526024016105a4565b8673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bb5576040517f23295f0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8089166004830152841660248201526044016105a4565b73ffffffffffffffffffffffffffffffffffffffff86161580610bed575073ffffffffffffffffffffffffffffffffffffffff861630145b15610c3c576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871660048201526024016105a4565b3373ffffffffffffffffffffffffffffffffffffffff881614610cfe57808015610c89575060008581526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b158015610cc7575073ffffffffffffffffffffffffffffffffffffffff8716600090815260026020908152604080832033845290915290205460ff16155b15610cfe576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d11878787601886901c15158861126d565b50505050505050565b60408051808201909152601281527f307832313334353637383941424344464530000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060005b83811015610e2b576000610dad8484888886818110610d9357610d936118a4565b9050602002016020810190610da891906118d3565b6112d9565b9350905080610e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4d4f5645000000000000000000000000000000000000000060448201526064016105a4565b5080610e2381611923565b915050610d72565b5050505050565b60608167ffffffffffffffff811115610e4d57610e4d611655565b604051908082528060200260200182016040528015610e9257816020015b6040805180820190915260008082526020820152815260200190600190039081610e6b5790505b50905060005b82811015610f62576000806000868685818110610eb757610eb76118a4565b90506020020135815260200190815260200160002054905080838381518110610ee257610ee26118a4565b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060b881901c67ffffffffffffffff16838381518110610f4157610f416118a4565b60209081029190910181015101525080610f5a81611923565b915050610e98565b5092915050565b601883901c6000610f7b85600161195b565b905081601882901c14610fba576040517fadc1557200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841661100757600083815260208190526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff881617905561108f565b60008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8a811660a087901b177f800000000000000000000000000000000000000000000000000000000000000017909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790555b828473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602081905260409091208054909101905580156111735773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b6000828152602081905260408082204360b81b73ffffffffffffffffffffffffffffffffffffffff80881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611279858585856110f2565b73ffffffffffffffffffffffffffffffffffffffff84163b15610e2b576112a333868686856113ba565b610e2b576040517f4e472e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080806112e860048661199d565b905060006112f76004876119b1565b9050600085600381111561130d5761130d6119c5565b0361132f5761131e600160046119f4565b82101561132a57600193505b6113b0565b6001856003811115611343576113436119c5565b0361136457611354600160046119f4565b81101561132a57600193506113b0565b6002856003811115611378576113786119c5565b0361138c57811561132a57600193506113b0565b60038560038111156113a0576113a06119c5565b036113b05780156113b057600193505b5050935093915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663150b7a02888887876040518563ffffffff1660e01b81526004016113fc9493929190611a07565b6020604051808303816000875af115801561141b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143f9190611a50565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146114bd57600080fd5b50565b6000602082840312156114d257600080fd5b81356114dd8161148f565b9392505050565b6000815180845260005b8181101561150a576020818501810151868301820152016114ee565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006114dd60208301846114e4565b60006020828403121561156d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109f657600080fd5b600080604083850312156115ab57600080fd5b6115b483611574565b946020939093013593505050565b6000806000606084860312156115d757600080fd5b6115e084611574565b92506115ee60208501611574565b9150604084013590509250925092565b60006020828403121561161057600080fd5b6114dd82611574565b6000806040838503121561162c57600080fd5b61163583611574565b91506020830135801515811461164a57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561169a57600080fd5b6116a385611574565b93506116b160208601611574565b925060408501359150606085013567ffffffffffffffff808211156116d557600080fd5b818701915087601f8301126116e957600080fd5b8135818111156116fb576116fb611655565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561174157611741611655565b816040528281528a602084870101111561175a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008083601f84011261179057600080fd5b50813567ffffffffffffffff8111156117a857600080fd5b6020830191508360208260051b85010111156117c357600080fd5b9250929050565b600080602083850312156117dd57600080fd5b823567ffffffffffffffff8111156117f457600080fd5b6118008582860161177e565b90969095509350505050565b6000806040838503121561181f57600080fd5b61182883611574565b915061183660208401611574565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611897578151805173ffffffffffffffffffffffffffffffffffffffff16855286015186850152928401929085019060010161185c565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156118e557600080fd5b8135600481106114dd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611954576119546118f4565b5060010190565b8082018082111561051e5761051e6118f4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826119ac576119ac61196e565b500690565b6000826119c0576119c061196e565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8181038181111561051e5761051e6118f4565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152611a4660808301846114e4565b9695505050505050565b600060208284031215611a6257600080fd5b81516114dd8161148f56fea264697066735822122012e0017d728e57d31d65c17e07771330b08b70e61e3e9fd634906b30ae10a87d64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "errors": {
      "InvalidAddress(address)": [
        {
          "params": {
            "addr": "invalid address"
          }
        }
      ],
      "NonExistentToken(uint256)": [
        {
          "params": {
            "tokenID": "id of the expected token"
          }
        }
      ],
      "NotOwner(address,address)": [
        {
          "params": {
            "currentOwner": "the current owner",
            "provided": "the address expected to be the current owner"
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "params": {
          "approved": "account who can know transfer on the owner's behalf",
          "owner": "current owner of the token",
          "tokenID": "id of the token being approved"
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "params": {
          "approved": "whether it is approved or not",
          "operator": "account who can know transfer on the owner's behalf",
          "owner": "the account granting rights over all of its token"
        }
      },
      "Transfer(address,address,uint256)": {
        "params": {
          "from": "the account the token is sent from",
          "to": "the account the token is sent to",
          "tokenID": "id of the token being sent"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "The address receiving the approval.",
          "tokenID": "The id of the token."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenID": "The id of the token."
        },
        "returns": {
          "operator": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "params": {
          "tokenIDs": "The list of token ids to check."
        },
        "returns": {
          "ownersData": "The list of (owner, lastTransferBlockNumber) for each ids given as input."
        }
      },
      "ownerAndLastTransferBlockNumberOf(uint256)": {
        "params": {
          "tokenID": "The id of the token."
        },
        "returns": {
          "blockNumber": "The blocknumber at which the last transfer of that id happened.",
          "owner": "The address of the token owner."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenID": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "to": "The recipient of the token.",
          "tokenID": "The id of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "to": "The recipient of the token.",
          "tokenID": "The id of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `tokenID` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
        "params": {
          "tokenID": "id of the token being queried."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "to": "The recipient of the token.",
          "tokenID": "The id of the token."
        }
      }
    },
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1363800",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "RANDOM()": "infinite",
        "SIZE()": "262",
        "SOLUTION()": "infinite",
        "approve(address,uint256)": "53565",
        "balanceOf(address)": "2642",
        "getApproved(uint256)": "4768",
        "isApprovedForAll(address,address)": "infinite",
        "name()": "infinite",
        "ownerAndLastTransferBlockNumberList(uint256[])": "infinite",
        "ownerAndLastTransferBlockNumberOf(uint256)": "2540",
        "ownerOf(uint256)": "2557",
        "proposeSolution(uint8[])": "infinite",
        "safeTransferFrom(address,address,uint256)": "infinite",
        "safeTransferFrom(address,address,uint256,bytes)": "infinite",
        "setApprovalForAll(address,bool)": "26665",
        "supportsInterface(bytes4)": "456",
        "symbol()": "infinite",
        "tokenURI(uint256)": "539",
        "transferFrom(address,address,uint256)": "infinite"
      },
      "internal": {
        "_at(bytes memory,uint256)": "infinite",
        "step(bytes memory,uint256,enum VitalikSecret.Move)": "393"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provided\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferRejected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RANDOM\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLUTION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"ownerAndLastTransferBlockNumberList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721WithBlocknumber.OwnerData[]\",\"name\":\"ownersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerAndLastTransferBlockNumberOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VitalikSecret.Move[]\",\"name\":\"moves\",\"type\":\"uint8[]\"}],\"name\":\"proposeSolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidAddress(address)\":[{\"params\":{\"addr\":\"invalid address\"}}],\"NonExistentToken(uint256)\":[{\"params\":{\"tokenID\":\"id of the expected token\"}}],\"NotOwner(address,address)\":[{\"params\":{\"currentOwner\":\"the current owner\",\"provided\":\"the address expected to be the current owner\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"account who can know transfer on the owner's behalf\",\"owner\":\"current owner of the token\",\"tokenID\":\"id of the token being approved\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"whether it is approved or not\",\"operator\":\"account who can know transfer on the owner's behalf\",\"owner\":\"the account granting rights over all of its token\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"the account the token is sent from\",\"to\":\"the account the token is sent to\",\"tokenID\":\"id of the token being sent\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval.\",\"tokenID\":\"The id of the token.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"getApproved(uint256)\":{\"params\":{\"tokenID\":\"The id of the token.\"},\"returns\":{\"operator\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"params\":{\"tokenIDs\":\"The list of token ids to check.\"},\"returns\":{\"ownersData\":\"The list of (owner, lastTransferBlockNumber) for each ids given as input.\"}},\"ownerAndLastTransferBlockNumberOf(uint256)\":{\"params\":{\"tokenID\":\"The id of the token.\"},\"returns\":{\"blockNumber\":\"The blocknumber at which the last transfer of that id happened.\",\"owner\":\"The address of the token owner.\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenID\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"to\":\"The recipient of the token.\",\"tokenID\":\"The id of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"to\":\"The recipient of the token.\",\"tokenID\":\"The id of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `tokenID` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenID\":\"id of the token being queried.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"to\":\"The recipient of the token.\",\"tokenID\":\"The id of the token.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAddress(address)\":[{\"notice\":\"An invalid address is specified (for example: zero address)\"}],\"NonExistentToken(uint256)\":[{\"notice\":\"The token does not exist\"}],\"NonceOverflow()\":[{\"notice\":\"The Nonce overflowed, make a transfer to self to allow new nonces.\"}],\"NotAuthorized()\":[{\"notice\":\"Not authorized to perform this operation\"}],\"NotOwner(address,address)\":[{\"notice\":\"The address from which the token is sent is not the current owner\"}],\"TransferRejected()\":[{\"notice\":\"The Transfer was rejected by the destination\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Triggered when a token is approved to be sent by another account  Note tat the approval get reset when a Transfer event for that same token is emitted.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Triggered when an account approve or disaprove another to transfer on its behalf\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Triggered when a token is transferred\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to transfer a specific token on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator to transfer any of its tokens.\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"notice\":\"Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\"},\"ownerAndLastTransferBlockNumberOf(uint256)\":{\"notice\":\"Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"notice\":\"a puzzle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/VitalikSecret.sol\":\"VitalikSecret\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0bbdb7cf3d2c6acf95398c0ef54cb0e6ae8a3e6ce6f18fafeb0aa55cb74fb8fd\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721WithBlocknumber.sol\\\";\\nimport \\\"./ImplementingERC721Internal.sol\\\";\\n\\nimport \\\"../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract BasicERC721 is IERC721, IERC721WithBlocknumber, ImplementingERC721Internal {\\n    using Openzeppelin_Address for address;\\n\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\n    uint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @inheritdoc IERC721\\n    function approve(address operator, uint256 tokenID) external override {\\n        (address owner, uint256 nonce) = _ownerAndNonceOf(tokenID);\\n        if (owner == address(0)) {\\n            revert NonExistentToken(tokenID);\\n        }\\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\\n            revert NotAuthorized();\\n        }\\n        _approveFor(owner, nonce, operator, tokenID);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override {\\n        (address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenID);\\n        if (owner == address(0)) {\\n            revert NonExistentToken(tokenID);\\n        }\\n        if (from != owner) {\\n            revert NotOwner(from, owner);\\n        }\\n        if (to == address(0) || to == address(this)) {\\n            revert InvalidAddress(to);\\n        }\\n        if (msg.sender != from) {\\n            if (!(operatorEnabled && _operators[tokenID] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n                revert NotAuthorized();\\n            }\\n        }\\n        _transferFrom(from, to, tokenID, (nonce >> 24) != 0);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override {\\n        safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) public view virtual override returns (uint256 balance) {\\n        if (owner == address(0)) {\\n            revert InvalidAddress(owner);\\n        }\\n        balance = _balances[owner];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenID) external view override returns (address owner) {\\n        owner = _ownerOf(tokenID);\\n        if (owner == address(0)) {\\n            revert NonExistentToken(tokenID);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenID) external view override returns (address operator) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenID);\\n        if (owner == address(0)) {\\n            revert NonExistentToken(tokenID);\\n        }\\n        if (operatorEnabled) {\\n            return _operators[tokenID];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) public override {\\n        (address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenID);\\n        if (owner == address(0)) {\\n            revert NonExistentToken(tokenID);\\n        }\\n        if (owner != from) {\\n            revert NotOwner(from, owner);\\n        }\\n\\n        if (to == address(0) || to == address(this)) {\\n            revert InvalidAddress(to);\\n        }\\n\\n        if (msg.sender != from) {\\n            if (!(operatorEnabled && _operators[tokenID] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n                revert NotAuthorized();\\n            }\\n        }\\n        _safeTransferFrom(from, to, tokenID, (nonce >> 24) != 0, data);\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        /// 0x01ffc9a7 is ERC165.\\n        /// 0x80ac58cd is ERC721\\n        /// 0x5b5e139f is for ERC721 metadata\\n        return interfaceID == 0x01ffc9a7 || interfaceID == 0x80ac58cd || interfaceID == 0x5b5e139f;\\n    }\\n\\n    /// @inheritdoc IERC721WithBlocknumber\\n    function ownerAndLastTransferBlockNumberOf(uint256 tokenID)\\n        external\\n        view\\n        override\\n        returns (address owner, uint256 blockNumber)\\n    {\\n        (address currentOwner, uint256 nonce) = _ownerAndNonceOf(tokenID);\\n        owner = currentOwner;\\n        blockNumber = (nonce >> 24);\\n    }\\n\\n    /// @inheritdoc IERC721WithBlocknumber\\n    function ownerAndLastTransferBlockNumberList(uint256[] calldata tokenIDs)\\n        external\\n        view\\n        virtual\\n        returns (OwnerData[] memory ownersData)\\n    {\\n        ownersData = new OwnerData[](tokenIDs.length);\\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\\n            uint256 data = _owners[tokenIDs[i]];\\n            ownersData[i].owner = address(uint160(data));\\n            ownersData[i].lastTransferBlockNumber = (data >> 184) & 0xFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    // ------------------------------------------------------------------------------------------------------------------\\n    // INTERNALS\\n    // ------------------------------------------------------------------------------------------------------------------\\n\\n    function _safeMint(address to, uint256 tokenID) internal {\\n        _safeTransferFrom(address(0), to, tokenID, false, \\\"\\\");\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bool registered,\\n        bytes memory data\\n    ) internal {\\n        _transferFrom(from, to, tokenID, registered);\\n        if (to.isContract()) {\\n            if (!_checkOnERC721Received(msg.sender, from, to, tokenID, data)) {\\n                revert TransferRejected();\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bool registered\\n    ) internal virtual {\\n        unchecked {\\n            _balances[to]++;\\n            if (registered) {\\n                _balances[from]--;\\n            }\\n        }\\n\\n        // We encode the blockNumber in the token nonce. We can then use it for count voting.\\n        _owners[tokenID] = (block.number << 184) | uint256(uint160(to));\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    /// @dev See approve.\\n    function _approveFor(\\n        address owner,\\n        uint256 nonce,\\n        address operator,\\n        uint256 tokenID\\n    ) internal override {\\n        uint256 blockNumber = nonce >> 24;\\n        uint256 newNonce = nonce + 1;\\n        if (newNonce >> 24 != blockNumber) {\\n            revert NonceOverflow();\\n        }\\n        if (operator == address(0)) {\\n            _owners[tokenID] = (newNonce << 160) | uint256(uint160(owner));\\n        } else {\\n            _owners[tokenID] = OPERATOR_FLAG | ((newNonce << 160) | uint256(uint160(owner)));\\n            _operators[tokenID] = operator;\\n        }\\n        emit Approval(owner, operator, tokenID);\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal override {\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenID The id of the token we would like to transfer.\\n    /// @param data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenID, data);\\n        return (retval == ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Get the owner of a token.\\n    /// @param tokenID The token to query.\\n    function _ownerOf(uint256 tokenID) internal view virtual returns (address owner) {\\n        return address(uint160(_owners[tokenID]));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param tokenID The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[tokenID];\\n        owner = address(uint160(data));\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Get the owner and the permit nonce of a token.\\n    /// @param tokenID The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n    function _ownerAndNonceOf(uint256 tokenID) internal view virtual override returns (address owner, uint256 nonce) {\\n        uint256 data = _owners[tokenID];\\n        owner = address(uint160(data));\\n        nonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n\\n    // @dev Get the owner, the permit nonce of a token and operatorEnabled status of a token.\\n    /// @param tokenID The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerNonceAndOperatorEnabledOf(uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address owner,\\n            uint256 nonce,\\n            bool operatorEnabled\\n        )\\n    {\\n        uint256 data = _owners[tokenID];\\n        owner = address(uint160(data));\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n        nonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n}\\n\",\"keccak256\":\"0xa479fafe6c08b94bf3d41b2e5e169bb8cf7f90033691a3903ec6fb13792e4e06\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/ImplementingERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingERC721Internal {\\n    function _ownerAndNonceOf(uint256 tokenID) internal view virtual returns (address owner, uint256 nonce);\\n\\n    function _approveFor(\\n        address owner,\\n        uint256 nonce,\\n        address operator,\\n        uint256 tokenID\\n    ) internal virtual;\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xa8a6ed1a764da2589bd932b67174805ef0c47120d27fa4defc17a2368757efbe\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ERC165/interfaces/IERC165.sol\\\";\\nimport \\\"../../utils/GenericErrors.sol\\\";\\n\\ninterface IERC721Supply {\\n    /// @notice return the total number of token in existence\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IERC721 is IERC165 {\\n    /// @notice Triggered when a token is transferred\\n    /// @param from the account the token is sent from\\n    /// @param to the account the token is sent to\\n    /// @param tokenID id of the token being sent\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\\n\\n    /// @notice Triggered when a token is approved to be sent by another account\\n    ///  Note tat the approval get reset when a Transfer event for that same token is emitted.\\n    /// @param owner current owner of the token\\n    /// @param approved account who can know transfer on the owner's behalf\\n    /// @param tokenID id of the token being approved\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenID);\\n\\n    /// @notice Triggered when an account approve or disaprove another to transfer on its behalf\\n    /// @param owner the account granting rights over all of its token\\n    /// @param operator account who can know transfer on the owner's behalf\\n    /// @param approved whether it is approved or not\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice The token does not exist\\n    /// @param tokenID id of the expected token\\n    error NonExistentToken(uint256 tokenID);\\n    /// @notice The address from which the token is sent is not the current owner\\n    /// @param provided the address expected to be the current owner\\n    /// @param currentOwner the current owner\\n    error NotOwner(address provided, address currentOwner);\\n    /// @notice An invalid address is specified (for example: zero address)\\n    /// @param addr invalid address\\n    error InvalidAddress(address addr);\\n    /// @notice The Transfer was rejected by the destination\\n    error TransferRejected();\\n    /// @notice The Nonce overflowed, make a transfer to self to allow new nonces.\\n    error NonceOverflow();\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return balance The number of tokens owned by the address.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Get the owner of a token.\\n    /// @param tokenID The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 tokenID) external view returns (address owner);\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenID The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenID The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external;\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenID The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external;\\n\\n    /// @notice Approve an operator to transfer a specific token on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param tokenID The id of the token.\\n    function approve(address operator, uint256 tokenID) external;\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param tokenID The id of the token.\\n    /// @return operator The address of the operator.\\n    function getApproved(uint256 tokenID) external view returns (address operator);\\n\\n    /// @notice Check if the sender approved the operator to transfer any of its tokens.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfc57636452848e89a81850fe10e3ab1d5d7f5780d55ca0722a38fd59a44fd8ef\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `tokenID` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenID id of the token being queried.\\n    function tokenURI(uint256 tokenID) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8a4ff84c39ad5c6bbf3e5486d3687bc1e15b96835ede5761f1922cf7a72f3354\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Receiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param operator The address which called `safeTransferFrom` function\\n    /// @param from The address which previously owned the token\\n    /// @param tokenID The NFT identifier which is being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenID,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x47e1a42d5906cbc70c15f0352836dc7922d857632075c858f64e6286669a5e2e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721WithBlocknumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721WithBlocknumber {\\n    /// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n    /// @param tokenID The id of the token.\\n    /// @return owner The address of the token owner.\\n    /// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n    function ownerAndLastTransferBlockNumberOf(uint256 tokenID)\\n        external\\n        view\\n        returns (address owner, uint256 blockNumber);\\n\\n    struct OwnerData {\\n        address owner;\\n        uint256 lastTransferBlockNumber;\\n    }\\n\\n    /// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n    /// @param tokenIDs The list of token ids to check.\\n    /// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n    function ownerAndLastTransferBlockNumberList(uint256[] calldata tokenIDs)\\n        external\\n        view\\n        returns (OwnerData[] memory ownersData);\\n}\\n\",\"keccak256\":\"0x2461ec24c55a1b6c13d451e52ad7600bc2da469996041700a3775efbcde7042b\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Openzeppelin_Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54a1b5eb6fdeb706049c5f570c398a49ea05f3da2d8e35f3ae344059d622350a\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/utils/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Not authorized to perform this operation\\nerror NotAuthorized();\\n\",\"keccak256\":\"0x333aa48943e66849a9350384e7ec2553b93e8a8a12b8ad300d3341f7c98b60fd\",\"license\":\"MIT\"},\"solidity-proxy/solc_0.8/EIP1967/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/VitalikSecret.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"solidity-proxy/solc_0.8/EIP1967/Proxied.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Metadata.sol\\\";\\n\\n/// @notice a puzzle\\ncontract VitalikSecret is BasicERC721, IERC721Metadata, Proxied {\\n    enum Move {\\n        RIGHT,\\n        DOWN,\\n        LEFT,\\n        UP\\n    }\\n\\n    uint256 public constant SIZE = 4;\\n    bytes public constant SOLUTION = \\\"0x123456789ABCDEF0\\\";\\n\\n    // TODO immutable but constructor match a pre-agreed block hash\\n    bytes public constant RANDOM = \\\"0x213456789ABCDFE0\\\";\\n    uint256 immutable INITIAL_POSITION = 15;\\n\\n    // TODO commit first to prevent front-running\\n    // function proposeSolution(bytes memory moves) external {\\n    function proposeSolution(Move[] calldata moves) external {\\n        bytes memory state = RANDOM;\\n        uint256 position = INITIAL_POSITION;\\n\\n        for (uint256 i = 0; i < moves.length; i++) {\\n            bool valid;\\n            (valid, position) = step(state, position, moves[i]);\\n            require(valid, \\\"INVALID_MOVE\\\");\\n        }\\n    }\\n\\n    function step(\\n        bytes memory currentState,\\n        uint256 position,\\n        Move move\\n    ) internal returns (bool valid, uint256 newPosition) {\\n        uint256 x = position % SIZE;\\n        uint256 y = position / SIZE;\\n        if (move == Move.RIGHT) {\\n            if (x < SIZE - 1) {\\n                valid = true;\\n                // newState =\\n            }\\n        } else if (move == Move.DOWN) {\\n            if (y < SIZE - 1) {\\n                valid = true;\\n                // newState =\\n            }\\n        } else if (move == Move.LEFT) {\\n            if (x > 0) {\\n                valid = true;\\n                // newState =\\n            }\\n        } else if (move == Move.UP) {\\n            if (y > 0) {\\n                valid = true;\\n                // newState =\\n            }\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenID) external view returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"VITALIK SECRET\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"VTS\\\";\\n    }\\n\\n    // ---------------------------------------------------------------------------\\n    function _at(bytes memory data, uint256 pos) internal returns (uint256 v) {\\n        assembly {\\n            let b := mload(add(add(data, 32), div(pos, 2)))\\n            v := and(b, 0xF)\\n            if eq(mod(pos, 2), 1) {\\n                v := shr(4, b)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf9a32cfa970b7d1342fc943e3c8b13ae8bfed34982d70f32464c593517ab56d\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 36,
        "contract": "src/VitalikSecret.sol:VitalikSecret",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 40,
        "contract": "src/VitalikSecret.sol:VitalikSecret",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46,
        "contract": "src/VitalikSecret.sol:VitalikSecret",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 50,
        "contract": "src/VitalikSecret.sol:VitalikSecret",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "errors": {
      "InvalidAddress(address)": [
        {
          "notice": "An invalid address is specified (for example: zero address)"
        }
      ],
      "NonExistentToken(uint256)": [
        {
          "notice": "The token does not exist"
        }
      ],
      "NonceOverflow()": [
        {
          "notice": "The Nonce overflowed, make a transfer to self to allow new nonces."
        }
      ],
      "NotAuthorized()": [
        {
          "notice": "Not authorized to perform this operation"
        }
      ],
      "NotOwner(address,address)": [
        {
          "notice": "The address from which the token is sent is not the current owner"
        }
      ],
      "TransferRejected()": [
        {
          "notice": "The Transfer was rejected by the destination"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Triggered when a token is approved to be sent by another account  Note tat the approval get reset when a Transfer event for that same token is emitted."
      },
      "ApprovalForAll(address,address,bool)": {
        "notice": "Triggered when an account approve or disaprove another to transfer on its behalf"
      },
      "Transfer(address,address,uint256)": {
        "notice": "Triggered when a token is transferred"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to transfer a specific token on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator to transfer any of its tokens."
      },
      "name()": {
        "notice": "A descriptive name for a collection of NFTs in this contract"
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "notice": "Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism."
      },
      "ownerAndLastTransferBlockNumberOf(uint256)": {
        "notice": "Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "symbol()": {
        "notice": "An abbreviated name for NFTs in this contract"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "notice": "a puzzle",
    "version": 1
  },
  "argsData": "0x",
  "transaction": {
    "hash": "0xc6f45cea04b4e441af88fb3ba8c25e1110aed02ee94b906b0b4ff9fc48734341",
    "nonce": "0x0",
    "origin": "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20"
  },
  "receipt": {
    "confirmations": 0,
    "blockHash": "0xb1b7a4969d3e3131dd049d847a6d4a469eecc8256201ed6612750cf58ebc447c",
    "blockNumber": "0x23112f",
    "transactionIndex": "0x0"
  }
}